// Code generated by Zipline. DO NOT EDIT.

// go:generate zipline
// +build !ziplinegen

package services

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/bilal-bhatti/zipline/example/models"
	"github.com/go-chi/chi"
)

func NewRouter() *chi.Mux {
	mux := chi.NewRouter()
	mux.Use(Authentication)
	mux.Post("/contacts", ContactsServiceCreateHandlerFunc())
	mux.Get("/contacts/{id}", ContactsServiceGetOneHandlerFunc())
	mux.Get("/{month}-{day}-{year}", ContactsServiceGetByDateHandlerFunc())
	mux.Post("/contacts/{id}", ContactsServiceUpdateHandlerFunc())
	mux.Post("/echo", EchoHandlerFunc())
	return mux
}

func ContactsServiceCreateHandlerFunc() http.HandlerFunc {
	return func(responseWriter http.ResponseWriter, request *http.Request) {
		var err error // tempory fix

		ctx := ProvideContext(request)

		contactRequest := &models.ContactRequest{}
		err = json.NewDecoder(request.Body).Decode(contactRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		contactsService := InitContactsService()

		result, err := contactsService.Create(ctx, contactRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		responseWriter.WriteHeader(http.StatusOK)
		responseWriter.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(responseWriter).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ContactsServiceGetOneHandlerFunc() http.HandlerFunc {
	return func(responseWriter http.ResponseWriter, request *http.Request) {
		var err error // tempory fix

		id, err := strconv.Atoi(chi.URLParam(request, "id"))
		if err != nil {
			// invalid request error
			panic(err)
		}

		contactsService := InitContactsService()

		result, err := contactsService.GetOne(id)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		responseWriter.WriteHeader(http.StatusOK)
		responseWriter.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(responseWriter).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ContactsServiceGetByDateHandlerFunc() http.HandlerFunc {
	return func(responseWriter http.ResponseWriter, request *http.Request) {
		var err error // tempory fix

		df := ProvideDateFilter(request)

		contactsService := InitContactsService()

		result, err := contactsService.GetByDate(df)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		responseWriter.WriteHeader(http.StatusOK)
		responseWriter.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(responseWriter).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func ContactsServiceUpdateHandlerFunc() http.HandlerFunc {
	return func(responseWriter http.ResponseWriter, request *http.Request) {
		var err error // tempory fix

		ctx := ProvideContext(request)

		id, err := strconv.Atoi(chi.URLParam(request, "id"))
		if err != nil {
			// invalid request error
			panic(err)
		}

		contactRequest := models.ContactRequest{}
		err = json.NewDecoder(request.Body).Decode(&contactRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		contactsService := InitContactsService()

		result, err := contactsService.Update(ctx, id, contactRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		responseWriter.WriteHeader(http.StatusOK)
		responseWriter.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(responseWriter).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}

func EchoHandlerFunc() http.HandlerFunc {
	return func(responseWriter http.ResponseWriter, request *http.Request) {
		var err error // tempory fix

		echoRequest := EchoRequest{}
		err = json.NewDecoder(request.Body).Decode(&echoRequest)
		if err != nil {
			// write error response
			// invalid request error
			panic(err)
		}

		result, err := Echo(echoRequest)
		if err != nil {
			// write error response
			// internal error
			panic(err)
		}

		responseWriter.WriteHeader(http.StatusOK)
		responseWriter.Header().Set("Content-Type", "text/plain; charset=utf-8")
		err = json.NewEncoder(responseWriter).Encode(result)
		if err != nil {
			// write error response
			panic(err)
		}
	}
}
