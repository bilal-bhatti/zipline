{
  "components": {
    "schemas": {
      "EchoResponse": {
        "additionalProperties": false,
        "description": "EchoResponse model",
        "properties": {
          "output": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Error": {
        "additionalProperties": false,
        "description": "error response object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingListResponse": {
        "additionalProperties": false,
        "description": "List of things",
        "properties": {
          "things": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "bool": {
                  "type": "boolean"
                },
                "createDate": {
                  "format": "date-time,2006-01-02",
                  "type": "string"
                },
                "float32": {
                  "format": "float",
                  "type": "number"
                },
                "float64": {
                  "format": "double",
                  "type": "number"
                },
                "int": {
                  "type": "integer"
                },
                "int16": {
                  "format": "int16",
                  "type": "integer"
                },
                "int32": {
                  "format": "int32",
                  "type": "integer"
                },
                "int64": {
                  "format": "int64",
                  "type": "integer"
                },
                "int8": {
                  "format": "int8",
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "uint": {
                  "type": "integer"
                },
                "uint16": {
                  "format": "int16",
                  "type": "integer"
                },
                "uint32": {
                  "format": "int32",
                  "type": "integer"
                },
                "uint64": {
                  "format": "int64",
                  "type": "integer"
                },
                "uint8": {
                  "format": "int8",
                  "type": "integer"
                },
                "updateDate": {
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "models.ThingRequest": {
        "additionalProperties": false,
        "description": "ThingRequest model",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "models.ThingResponse": {
        "additionalProperties": false,
        "description": "ThingResponse model",
        "properties": {
          "bool": {
            "type": "boolean"
          },
          "createDate": {
            "format": "date-time,2006-01-02",
            "type": "string"
          },
          "float32": {
            "format": "float",
            "type": "number"
          },
          "float64": {
            "format": "double",
            "type": "number"
          },
          "int": {
            "type": "integer"
          },
          "int16": {
            "format": "int16",
            "type": "integer"
          },
          "int32": {
            "format": "int32",
            "type": "integer"
          },
          "int64": {
            "format": "int64",
            "type": "integer"
          },
          "int8": {
            "format": "int8",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "uint": {
            "type": "integer"
          },
          "uint16": {
            "format": "int16",
            "type": "integer"
          },
          "uint32": {
            "format": "int32",
            "type": "integer"
          },
          "uint64": {
            "format": "int64",
            "type": "integer"
          },
          "uint8": {
            "format": "int8",
            "type": "integer"
          },
          "updateDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "services.ContactRequest": {
        "additionalProperties": false,
        "description": "ContactRequest model",
        "properties": {
          "address": {
            "additionalProperties": false,
            "properties": {
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "street": {
                "type": "string"
              },
              "zipCode": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "eMail": {
            "format": "email",
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "services.ContactResponse": {
        "additionalProperties": false,
        "description": "ContactResponse model",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "services.PingRequest": {
        "additionalProperties": false,
        "description": "PingRequest model",
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "services.PingResponse": {
        "additionalProperties": false,
        "description": "PingResponse model",
        "properties": {
          "output": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
<<<<<<< HEAD
      "token": {
        "description": "Requests should pass a token."
=======
      "apiKey": {
        "description": "required api key",
        "in": "header",
        "name": "X-API-KEY",
        "type": "apiKey"
>>>>>>> annotations
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@swagger.io",
      "name": "API Support",
      "url": "http://www.swagger.io/support"
    },
    "description": "This is a sample Zipline generated server.",
    "license": {
      "name": "Apache 2.0",
      "url": "http"
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Zipline Example Swagger API",
    "version": "1.1"
  },
  "openapi": "3.0.3",
  "paths": {
    "/contacts": {
      "delete": {
        "description": "DeleteBulk contact by id",
        "operationId": "ContactsServiceDeleteBulk",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "DeleteBulk contact by id",
        "tags": [
          "services"
        ]
      },
      "get": {
<<<<<<< HEAD
        "description": "GetBunch by ids",
=======
        "description": "GetBunch of contacts by ids\n\n@summary           Get a list of contacts by ids\n@description       Get a list of contacts by ids\n@tags              contacts\n@produces          application/json\n@parameters        (name:ids, description: list of contact ids, required:true)\n@responses.400     {models.ErrorResponse}\n@responses.404     {models.ErrorResponse}\n@responses.default {models.ErrorResponse}",
>>>>>>> annotations
        "operationId": "ContactsServiceGetBunch",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "required": true,
            "schema": {
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/services.ContactResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
<<<<<<< HEAD
        "summary": "GetBunch by ids",
=======
        "summary": "GetBunch of contacts by ids\n\n@summary           Get a list of contacts by ids\n@description       Get a list of contacts by ids\n@tags              contacts\n@produces          application/json\n@parameters        (name:ids, description: list of contact ids, required:true)\n@responses.400     {models.ErrorResponse}\n@responses.404     {models.ErrorResponse}\n@responses.default {models.ErrorResponse}",
>>>>>>> annotations
        "tags": [
          "services"
        ]
      },
      "post": {
        "description": "Create a new contact request entity.",
        "operationId": "ContactsServiceCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/services.ContactRequest"
              }
            }
          },
          "description": "ContactRequest model",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/services.ContactResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Create a new contact request entity.",
        "tags": [
          "services"
        ]
      }
    },
    "/contacts/{id}": {
      "get": {
        "description": "GetOne contact by id",
        "operationId": "ContactsServiceGetOne",
        "parameters": [
          {
            "description": "contact id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/services.ContactResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "GetOne contact by id",
        "tags": [
          "services"
        ]
      },
      "post": {
        "description": "Update a contact entity with provided data.",
        "operationId": "ContactsServiceUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/services.ContactRequest"
              }
            }
          },
          "description": "ContactRequest model",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/services.ContactResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Update a contact entity with provided data.",
        "tags": [
          "services"
        ]
      },
      "put": {
        "description": "Replace a contact entity completely.",
        "operationId": "ContactsServiceReplace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/services.ContactRequest"
              }
            }
          },
          "description": "ContactRequest model",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/services.ContactResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Replace a contact entity completely.",
        "tags": [
          "services"
        ]
      }
    },
    "/contacts/{month}-{day}-{year}": {
      "get": {
        "description": "Get contacts list by date",
        "operationId": "ContactsServiceGetByDate",
        "parameters": [
          {
            "in": "path",
            "name": "month",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "day",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/services.ContactResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Get contacts list by date",
        "tags": [
          "services"
        ]
      }
    },
    "/doodads": {
      "post": {
        "description": "Create a new doodad entity.",
        "operationId": "DoodadsServiceCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.ThingRequest"
              }
            }
          },
          "description": "ThingRequest model",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ThingResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Create a new doodad entity.",
        "tags": [
          "services"
        ]
      }
    },
    "/echo/{input}": {
      "get": {
        "description": "Echo returns body with 'i's replaced with 'o's",
        "operationId": "Echo",
        "parameters": [
          {
            "in": "path",
            "name": "input",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EchoResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Echo returns body with 'i's replaced with 'o's",
        "tags": [
          "web"
        ]
      }
    },
    "/ping": {
      "post": {
        "description": "Ping returns body with 'i's replaced with 'o's",
        "operationId": "Ping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/services.PingRequest"
              }
            }
          },
          "description": "PingRequest model",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/services.PingResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Ping returns body with 'i's replaced with 'o's",
        "tags": [
          "services"
        ]
      }
    },
    "/things": {
      "get": {
        "description": "Get things by date range",
        "operationId": "ThingsServiceGetByDateRange",
        "parameters": [
          {
            "description": "`format:\"date-time,2006-01-02\"` date should be in Go time format",
            "in": "query",
            "name": "from",
            "schema": {
              "format": "date-time,2006-01-02",
              "type": "string"
            }
          },
          {
            "description": "`format:\"date-time,2006-01-02\"` date should be in Go time format",
            "in": "query",
            "name": "to",
            "schema": {
              "format": "date-time,2006-01-02",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThingListResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Get things by date range",
        "tags": [
          "web"
        ]
      },
      "post": {
        "description": "Create thing",
        "operationId": "ThingsServiceCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/models.ThingRequest"
              }
            }
          },
          "description": "ThingRequest model",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.ThingResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Create thing",
        "tags": [
          "web"
        ]
      }
    },
    "/things/{category}": {
      "get": {
        "description": "Get things by category and search query",
        "operationId": "ThingsServiceGetByCategoryAndQuery",
        "parameters": [
          {
            "description": "category of data to search",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "search query",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThingListResponse"
                }
              }
            },
            "description": "200 success response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Get things by category and search query",
        "tags": [
          "web"
        ]
      }
    },
    "/things/{id}": {
      "delete": {
        "description": "Delete thing by id",
        "operationId": "ThingsServiceDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "unexpected error"
          }
        },
        "summary": "Delete thing by id",
        "tags": [
          "web"
        ]
      }
    }
  },
  "security": [
    {
<<<<<<< HEAD
      "token": []
=======
      "apiKey": []
>>>>>>> annotations
    }
  ],
  "servers": [
    {
      "url": "http://zipline.example.com/api"
    },
    {
      "url": "https://zipline.example.com/api"
    }
  ]
}
